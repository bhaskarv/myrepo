One more file
This has been created in branch test2 and will be merged to test1 and subsequently to master


Unified Interface:

Spring AI offers a standardized API that abstracts the complexities of integrating with different AI model providers. This unified interface allows developers to interact with various AI models using the same set of methods and operations, regardless of the provider.

Support for Major AI Model Providers:
Spring AI supports multiple AI model providers, including: Anthropic, OpenAI, Microsoft, Amazon, Google, Ollama

We need to provide different pieces of information to interact with different model providers
	OpenAI : Expects us to send an API kue
	Google Gemini - Expects to give details about project-id, location etc. 

	Spring AI abstracts away these details from code - allows us to define these in config files [ props / yml ]
		Makes it easy to switch between model providers

Portability
With the unified API, developers can easily switch between different AI model providers without having to rewrite significant portions of their code.

Familiarity and Consistency:

For developers already familiar with the Spring framework, adopting Spring AI feels natural and consistent with their existing development practices. This reduces the learning curve and allows for a smoother transition to incorporating AI features.


FEATURES 

ChatModel: Defines the interface for interacting with AI models, handling input prompts and output responses.

ChatClient: Provides a fluent API for building and sending prompts to the AI model, supporting both synchronous and streaming responses.

These classes work together to simplify the integration of AI-powered chat capabilities into your applications, making it easier to create conversational agents and enhance user interactions.

--------

Prompt Templates
Prompt templates help us to define and reuse structured prompts for interacting with AI models. 
They ensure that the input given to the model is well-formatted and can help in generating more accurate and meaningful responses.
This can include placeholders for dynamic content that can be filled in at runtime.

------------------

EmbeddingClient
Spring AI offers an Embedding API that simplifies the process of generating embeddings from input data. This API provides a consistent interface for interacting with embedding models, making it easy to incorporate embeddings into your applications.

	EmbeddingClient -- Method to generate mebedding for the provided input

Converting data into fixed size vectors of numbers. 

---------
Vector DBs

Spring AI provides a unified API for interacting with different vector databases, making it easy to switch between providers without significant changes to your code.

Spring AI provides APIs that simplify the interaction with vector databases. These APIs offer consistent methods for storing, retrieving, and querying vector embeddings, making it easy to incorporate vector database functionality into your application


Spring AI provides a consistent API for interacting with vector databases, making it easy to store, retrieve, and manage embeddings. This seamless integration simplifies the development process and ensures that embeddings can be efficiently managed within your applications.

------
Output Parsers

Output parsers are tools used in AI applications to interpret and structure the raw responses generated by AI models. They ensure that the outputs are in a usable and understandable format, which can be particularly useful when dealing with complex or unstructured data.

Output parsers in Spring AI transform raw AI model responses into structured formats, such as JSON or XML. This makes it easier to integrate the outputs with other systems or components.

----
Function calling

Function or tool calling enables AI models to execute predefined functions or tools based on the user's input or specific conditions.

It allows AI models to fetch real-time information, perform calculations, or trigger actions that require external tools or services.

https://docs.spring.io/spring-ai/reference/api/chat/comparison.html


